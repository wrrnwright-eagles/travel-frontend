{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSwitch/VSwitch.tsx"],
  "sourcesContent": ["// Styles\nimport './VSwitch.sass'\n\n// Components\nimport { makeSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { LoaderSlot, useLoader } from '@/composables/loader'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, ref } from 'vue'\nimport { filterInputAttrs, genericComponent, getUid, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\nimport type { LoaderSlotProps } from '@/composables/loader'\n\nexport type VSwitchSlots =\n  & VInputSlots\n  & VSelectionControlSlots\n  & { loader: [LoaderSlotProps] }\n\nexport const makeVSwitchProps = propsFactory({\n  indeterminate: Boolean,\n  inset: Boolean,\n  flat: Boolean,\n  loading: {\n    type: [Boolean, String],\n    default: false,\n  },\n\n  ...makeVInputProps(),\n  ...makeSelectionControlProps(),\n}, 'v-switch')\n\nexport const VSwitch = genericComponent<VSwitchSlots>()({\n  name: 'VSwitch',\n\n  inheritAttrs: false,\n\n  props: makeVSwitchProps(),\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': () => true,\n    'update:indeterminate': (val: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n    const { loaderClasses } = useLoader(props)\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== ''\n        ? props.loading\n        : props.color\n    })\n\n    const uid = getUid()\n    const id = computed(() => props.id || `switch-${uid}`)\n\n    function onChange () {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = VInput.filterProps(props)\n      const [controlProps, _2] = VSelectionControl.filterProps(props)\n      const control = ref<VSelectionControl>()\n\n      function onClick (e: Event) {\n        e.stopPropagation()\n        e.preventDefault()\n        control.value?.input?.click()\n      }\n\n      return (\n        <VInput\n          class={[\n            'v-switch',\n            { 'v-switch--inset': props.inset },\n            { 'v-switch--indeterminate': indeterminate.value },\n            loaderClasses.value,\n            props.class,\n          ]}\n          style={ props.style }\n          { ...inputAttrs }\n          { ...inputProps }\n          id={ id.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => (\n              <VSelectionControl\n                ref={ control }\n                { ...controlProps }\n                v-model={ model.value }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                type=\"checkbox\"\n                onUpdate:modelValue={ onChange }\n                aria-checked={ indeterminate.value ? 'mixed' : undefined }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                onFocus={ focus }\n                onBlur={ blur }\n                { ...controlAttrs }\n              >\n                {{\n                  ...slots,\n                  default: () => (<div class=\"v-switch__track\" onClick={ onClick }></div>),\n                  input: ({ textColorClasses, textColorStyles }) => (\n                    <div\n                      class={[\n                        'v-switch__thumb',\n                        textColorClasses.value,\n                      ]}\n                      style={ textColorStyles.value }\n                    >\n                      { props.loading && (\n                        <LoaderSlot\n                          name=\"v-switch\"\n                          active\n                          color={ isValid.value === false ? undefined : loaderColor.value }\n                        >\n                          { slotProps => (\n                            slots.loader\n                              ? slots.loader(slotProps)\n                              : (\n                                  <VProgressCircular\n                                    active={ slotProps.isActive }\n                                    color={ slotProps.color }\n                                    indeterminate\n                                    size=\"16\"\n                                    width=\"2\"\n                                  />\n                              )\n                          )}\n                        </LoaderSlot>\n                      )}\n                    </div>\n                  ),\n                }}\n              </VSelectionControl>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSwitch = InstanceType<typeof VSwitch>\n"],
  "mappings": "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",
  "names": ["makeVSwitchProps", "propsFactory", "indeterminate", "Boolean", "inset", "flat", "loading", "type", "String", "default", "makeVInputProps", "makeSelectionControlProps", "VSwitch", "genericComponent", "name", "inheritAttrs", "props", "emits", "focused", "update:modelValue", "val", "setup", "_ref", "attrs", "slots", "useProxiedModel", "model", "loaderClasses", "useLoader", "isFocused", "focus", "blur", "useFocus", "loaderColor", "computed", "color", "uid", "getUid", "id", "onChange", "value", "useRender", "inputAttrs", "controlAttrs", "filterInputAttrs", "inputProps", "_1", "VInput", "filterProps", "controlProps", "_2", "VSelectionControl", "control", "ref", "onClick", "e", "stopPropagation", "preventDefault", "input", "click", "_createVNode", "_mergeProps", "class", "style", "_ref2", "messagesId", "isDisabled", "isReadonly", "isValid", "$event", "undefined", "_ref3", "textColorClasses", "textColorStyles", "LoaderSlot", "slotProps", "loader", "VProgressCircular", "isActive"]
}
